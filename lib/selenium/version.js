// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var buildDownloadUrl, FALLBACK_SELENIUM_VERSION, find, FORCE_SELENIUM_VERSION, getLatestVersion, getMinor, parseSelenium, parseSeleniumMinor, parseXml, request, requestXml;
  buildDownloadUrl = function (version, minorVersion) {
    return 'http://selenium-release.storage.googleapis.com/' + minorVersion + '/selenium-server-standalone-' + version + '.jar';
  };
  FALLBACK_SELENIUM_VERSION = '2.44.0';
  FORCE_SELENIUM_VERSION = {
    downloadUrl: buildDownloadUrl('2.44.0', '2.44'),
    version: '2.44.0'
  };
  request = require('request');
  parseXml = require('xml2js').parseString;
  find = require('underscore').find;
  parseSeleniumMinor = function (result) {
    var error, minorVersion, parseError, prefix, prefixes, versionPath;
    minorVersion = null;
    error = null;
    try {
      prefixes = result.ListBucketResult.CommonPrefixes;
      prefix = prefixes[prefixes.length - 2];
      versionPath = prefix.Prefix[0];
      minorVersion = versionPath.substring(0, versionPath.length - 1);
    } catch (e$) {
      parseError = e$;
      error = parseError;
    }
    return {
      error: error,
      minorVersion: minorVersion
    };
  };
  parseSelenium = function (result) {
    var content, contents, error, parseError, version;
    version = null;
    error = null;
    try {
      contents = result.ListBucketResult.Contents;
      content = find(contents, function (content) {
        return content.Key[0].match(/selenium-server-standalone-/);
      });
      version = content.Key[0].match(/(\d+\.\d+\.\d+)/)[0];
    } catch (e$) {
      parseError = e$;
      error = parseError;
    }
    return {
      error: error,
      version: version
    };
  };
  requestXml = function (url, callback) {
    return request(url, function (error, response, body) {
      if (null != error)
        return callback(error);
      return parseXml(body, function (error, result) {
        if (null != error)
          return callback(error);
        return callback(null, result);
      });
    });
  };
  getMinor = function (version) {
    return version.split('.').slice(0, 2).join('.');
  };
  getLatestVersion = function (callback) {
    var url;
    url = 'http://selenium-release.storage.googleapis.com/?delimiter=/&prefix=';
    return requestXml(url, function (error, result) {
      var cache$, minorVersion;
      if (null != error)
        return callback(error);
      cache$ = parseSeleniumMinor(result);
      error = cache$.error;
      minorVersion = cache$.minorVersion;
      if (null != error)
        return callback(error);
      return requestXml('http://selenium-release.storage.googleapis.com/?delimiter=/&prefix=' + minorVersion + '/', function (error, result) {
        var cache$1, version;
        if (null != error)
          return callback(error);
        cache$1 = parseSelenium(result);
        error = cache$1.error;
        version = cache$1.version;
        return callback(error, version);
      });
    });
  };
  module.exports = function (callback) {
    if (null != FORCE_SELENIUM_VERSION)
      return callback(null, FORCE_SELENIUM_VERSION);
    return getLatestVersion(function (error, version) {
      var downloadUrl, minorVersion;
      if (null != error) {
        version = FALLBACK_SELENIUM_VERSION;
        console.log('[testium] Unable to determine latest version of selenium standalone server; using ' + version);
        console.error(error.stack || error);
      }
      minorVersion = getMinor(version);
      downloadUrl = buildDownloadUrl(version, minorVersion);
      return callback(null, {
        downloadUrl: downloadUrl,
        version: version
      });
    });
  };
}.call(this);
