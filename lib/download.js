// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var activeDownloadCount, bitsToSize, Download, multi, multimeter, parseHashes;
  Download = require('download');
  multimeter = require('multimeter');
  bitsToSize = require('prettysize');
  multi = multimeter(process);
  multi.on('^C', process.exit);
  multi.charm.reset();
  activeDownloadCount = 0;
  parseHashes = function (rawHash) {
    var hashes, parse;
    parse = function (result, hash) {
      var key, parts, value;
      parts = hash.trim().split('=');
      key = parts[0];
      value = parts.splice(1).join('=');
      result[key] = value;
      return result;
    };
    hashes = rawHash.split(',');
    return hashes.reduce(parse, {});
  };
  module.exports = function (url, destinationDir, fileName, description, callback) {
    var download, fileOptions, hash;
    hash = null;
    fileOptions = {
      url: url,
      name: fileName
    };
    download = new Download({ clear: false }).get(fileOptions, destinationDir);
    download.use(function (response, file, next) {
      var bar, fileLength, position, rawHash;
      fileLength = parseInt(response.headers['content-length'], 10);
      rawHash = response.headers['x-goog-hash'];
      hash = parseHashes(rawHash).md5;
      position = 0;
      activeDownloadCount += 1;
      multi.charm.position(1, activeDownloadCount * 3 + 2);
      multi.write(description);
      bar = multi(1, activeDownloadCount * 3 + 3, { width: 30 });
      multi.charm.position(1, activeDownloadCount * 3 + 5);
      response.on('data', function (data) {
        var msg, percent;
        position += data.length;
        percent = Math.round(position / fileLength * 100);
        return bar.ratio(position, fileLength, msg = '' + percent + '% - ' + bitsToSize(position) + ' / ' + bitsToSize(fileLength));
      });
      return response.on('end', function () {
        var msg;
        bar.ratio(fileLength, fileLength, msg = 'COMPLETE');
        activeDownloadCount -= 1;
        if (activeDownloadCount === 0) {
          multi.charm.reset();
          multi.destroy();
        }
        return next();
      });
    });
    return download.run(function (err, files) {
      if (null != err)
        callback(err);
      return callback(null, hash);
    });
  };
}.call(this);
